package com.xuyurepos.common.util.httpclient;



import java.io.IOException;
import java.net.URLEncoder;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;

/**
 * 基于 httpclient 4.5.3版本的 http工具类
 * @author mcSui
 *
 */
public class HttpTookit {
	
	static Logger logger=LoggerFactory.getLogger(HttpTookit.class);
	
	private static PoolingHttpClientConnectionManager connMgr;
    private static CloseableHttpClient        httpClient=null;
//    public static final String             CHARSET               = "UTF-8";
    private static  RequestConfig requestConfig;


    /** 
     * 最大连接数 
     */
    public final static int                MAX_TOTAL_CONNECTIONS = 800;
    /** 
     * 获取连接的最大等待时间 
     */
    public final static int                WAIT_TIMEOUT          = 60000;
    /** 
     * 每个路由最大连接数 
     */
    public final static int                MAX_ROUTE_CONNECTIONS = 400;
    /** 
     * 连接超时时间 
     */
    public final static int                CONNECT_TIMEOUT       = 10000;
    /** 
     * 读取超时时间 
     */
    public final static int                READ_TIMEOUT          = 10000;
    static {
    	try {
    		// 设置连接池
    		connMgr = new PoolingHttpClientConnectionManager();
    		// 设置连接池大小
    		connMgr.setMaxTotal(100);
    		connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());

      SSLContext sc=SSLContext.getInstance("SSLv3");
      sc.init(null, new TrustManager[] {
    		  // 实现一个X509TrustManager接口，用于绕过验证，不用修改里面的方法
     new X509TrustManager() {
                  @Override
                  public X509Certificate[] getAcceptedIssuers() {
                      return null;
                  }
                  @Override
                  public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                  }
                  @Override
                  public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                  }
              }
      }, new SecureRandom());    
      SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sc, NoopHostnameVerifier.INSTANCE);    

    requestConfig = RequestConfig.custom().setConnectionRequestTimeout(WAIT_TIMEOUT)
               .setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(READ_TIMEOUT).build();
        
        httpClient= HttpClients.custom().setSSLSocketFactory(socketFactory).setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();
        
	} catch (NoSuchAlgorithmException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (KeyManagementException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    }
//    public static String doGet(String url, Map<String, String> params) {
//        return doGet(url, params, CHARSET);
//    }
//
//    public static String doPost(String url, Map<String, String> params) {
//        return doPost( url, params, null,null, CHARSET);
//    }

    //    public static String doPost(String url, String params){
    //        return doPost(url, params,CHARSET);
    //    }
    /**
     * HTTP Get 获取内容
     * @param url  请求的url地址 ?之前的地址
     * @param params 请求的参数
     * @param charset    编码格式
     * @return    页面内容
     * @throws IOException 
     */
    public static String doGet(String url,Object objParam,String charset) throws IOException{
        if(StringUtils.isBlank(url)){
            return null;
        }
        	if(objParam instanceof Map) {
        	Map<String,String> params=(Map)objParam;
        		
//            if(params != null && !params.isEmpty()){
//                List<NameValuePair> pairs = new ArrayList<NameValuePair>(params.size());
//                for(Map.Entry<String,String> entry : params.entrySet()){
//                    String value = entry.getValue();
//                    if(value != null){
//                        pairs.add(new BasicNameValuePair(entry.getKey(),value));
//                    }
//                }
//                
//
//                url += "?" + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset));
//            }
        String param=	createLinkString(params);
        url +="?"+param;
        	}else if(objParam instanceof String) {
                url += "?" + ( URLEncoder.encode((String) objParam, charset));
        	}
        	
        	logger.info("请求完整路径："+url);
        	HttpGet httpGet = new HttpGet(url);
        	httpGet.setHeader("Content-Type","application/x-www-form-urlencoded");
        	httpGet.setConfig(requestConfig);
            CloseableHttpResponse response = httpClient.execute(httpGet);
            int statusCode = response.getStatusLine().getStatusCode();
//            if (statusCode != 200) {
//                httpGet.abort();
//                throw new RuntimeException("HttpClient,error status code :" + statusCode);
//            }
            HttpEntity entity = response.getEntity();
            String result = null;
            if (entity != null){
                result = EntityUtils.toString(entity, "utf-8");
            }
            logger.info("请求返回完整参数："+result);
            EntityUtils.consume(entity);
            response.close();
            return result;
       
    }
     
    /**
     * HTTP Post 获取内容
     * @param url  请求的url地址 ?之前的地址
     * @param params 请求的参数
     * @param charset    编码格式
     * @return    页面内容
     * @throws IOException 
     */
    public static String doPost(String url,Object objParam,String charset) throws IOException{
    	
    
    	
        if(StringUtils.isBlank(url)){
            return null;
        }
        HttpPost httpPost = new HttpPost(url);
        httpPost.setConfig(requestConfig);
    	if(objParam instanceof Map) {
    		
    		Map<String,String> params =(Map)objParam;
            List<NameValuePair> pairs = null;
            if(params != null && !params.isEmpty()){
                pairs = new ArrayList<NameValuePair>(params.size());
                for(Map.Entry<String,String> entry : params.entrySet()){
                    String value = entry.getValue();
                    if(value != null){
                        pairs.add(new BasicNameValuePair(entry.getKey(),value));
                    }
                }
            }
            if(pairs != null && pairs.size() > 0){
                httpPost.setEntity(new UrlEncodedFormEntity(pairs,charset));
            }
//    		String params=		createLinkString(map);
//        	if(StringUtils.isNoneBlank(params)) {
//                httpPost.setEntity((new StringEntity(params, CHARSET)));
//        	}
        }else if(objParam instanceof String) {
        	String params =(String)objParam;
        	if(StringUtils.isNoneBlank(params)) {
                httpPost.setEntity((new StringEntity(params, charset)));
        	}
        }
    	
    	logger.info("请求路径完整："+url+EntityUtils.toString(httpPost.getEntity()));
    	
            CloseableHttpResponse response = httpClient.execute(httpPost);
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != 200) {
                httpPost.abort();
                throw new RuntimeException("HttpClient,error status code :" + statusCode);
            }
            HttpEntity entity = response.getEntity();
            String result = null;
            if (entity != null){
                result = EntityUtils.toString(entity, "utf-8");
            }
            logger.info("请求返回结果："+result);
            EntityUtils.consume(entity);
            response.close();
            return result;
    }
    public static String createLinkString(Map<String, String> params) {

        List<String> keys = new ArrayList<String>(params.keySet());
        Collections.sort(keys);

        String prestr = "";

        for (int i = 0; i < keys.size(); i++) {
            String key = keys.get(i);
            String value = params.get(key);

            if (i == keys.size() - 1) {//拼接时，不包括最后一个&字符
                prestr = prestr + key + "=" + value;
            } else {
                prestr = prestr + key + "=" + value + "&";
            }
        }

        return prestr;
    }

    public static void main(String[] args) throws IOException {

//        String getData = doGet("https://www.icloud.com/", null);
//        System.out.println(getData);
//        System.out
//            .println("--------------------------------------------------分割线------------------------------------------------------");
    	TreeMap treeMap=new TreeMap();
    	treeMap.put("agencyCode","test1");
    	treeMap.put("accessNum","1440042671250");
    	treeMap.put("provider","01");
    	String str=getSign(treeMap);
    	Map map=new TreeMap();
    	map.put("agencyCode","test1");
    	map.put("accessNum","1440042671250");
    	map.put("provider","01");
    	map.put("sign",str);
        try {
			String postData = doPost("https://iots.shingsou.com/facade/singleGprsInfoQuery", JSON.toJSONString(map),"utf-8");
			 System.out.println("返回参数"+postData);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       
//        doPost("http://localhost:1112/httpClientServer/",new HashMap(),"E:/234/20150311170527.xls","123" ,"UTF-8");
    	
    	String str2="{\r\n" + 
    			"	\"body\": {\r\n" + 
    			"		\"encryDatar\n" + 
    			"		\"signData\": \"4ea77665d50ada4375e4234a3018609c\"\r\n" + 
    			"	},\r\n" + 
    			"	\"header\": {\r\n" + 
    			"		\"agencyCode\": \"P0000001\",\r\n" + 
    			"		\"key\": \"hXlGfkkNDoQR7TOHNZ6y9VfGO+fW487u8LqMp8UCytEB6vhDilL2Aq0B8SUBj8NL8AO3ci2Nbva9hJwNLfPMzLm8ydpwzjSuslSgPc25HI+LLolw8B7Fa4mfR3+/7gVxstiRRQ+TIk6+ncTYoHX6RaOoHNMh4Wbo6bd3vjp0/Ts=\",\r\n" + 
    			"		\"orgCode\": \"kg\",\r\n" + 
    			"		\"orgPwd\": \"qtcq67FY*9ntbyb6\",\r\n" + 
    			"		\"orgUser\": \"kg\",\r\n" + 
    			"		\"serviceCode\": \"QDB_AMS_001\"\r\n" + 
    			"	},\r\n" + 
    			"	\"message\": {\r\n" + 
    			"		\"returnCode\": \"000000\",\r\n" + 
    			"		\"returnMsg\": \"成功\"\r\n" + 
    			"	}\r\n" + 
    			"}";
    	
    	doPost("http://localhost:8080/api/outter/maizi/callback/withdraw.htm",str2,"UTF-8");
    }
   
	public static String getSign(TreeMap treeMap) {
		String str="";
		Iterator iter = treeMap.entrySet().iterator(); 
		while(iter.hasNext()) {
			Map.Entry entry = (Map.Entry)iter.next(); 
		     if(entry.getValue()!=null&&!entry.getValue().equals("")) {
		    	 str=str+entry.getKey()+"="+entry.getValue();
//		    	 if(iter.hasNext()) {
		    		 str=str+"&";
//		    	 }
		     }
		}
		return getMD5(str);
	}
	/**
	 * 获取MD5字符串
	 * @param str
	 * @return
	 */
	private static String getMD5(String str) {
		String key="xuYuRepos2019";
		String signStr=str+"key="+key;//&key
		String sign=DigestUtils.md5Hex(signStr).toUpperCase();
		return sign;
	}
}