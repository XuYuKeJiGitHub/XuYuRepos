package com.xuyurepos.service.impl.manager;

import java.io.File;
import java.math.BigDecimal;
import java.sql.Connection;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.xuyurepos.common.analysis.BigDataExcelOutWrite;
import com.xuyurepos.common.constants.SystemConstants;
import com.xuyurepos.common.exception.CustomException;
import com.xuyurepos.common.log.LoggerFactory;
import com.xuyurepos.common.page.PageModel;
import com.xuyurepos.common.util.DateUtil;
import com.xuyurepos.common.util.ProsUtil;
import com.xuyurepos.common.util.StringUtil;
import com.xuyurepos.dao.manager.XuyuContentCardInfoDao;
import com.xuyurepos.dao.manager.XuyuContentCardMgrDao;
import com.xuyurepos.dao.manager.XuyuMessageLogDao;
import com.xuyurepos.entity.manager.XuyuContentCardInfo;
import com.xuyurepos.entity.manager.XuyuMessageLog;
import com.xuyurepos.entity.system.SystemUser;
import com.xuyurepos.service.intergration.facade.SynInfoFacadeService;
import com.xuyurepos.service.intergration.facade.SynInfoJSFacadeService;
import com.xuyurepos.service.manager.IccIdManagerService;
import com.xuyurepos.service.system.SystemOrgService;
import com.xuyurepos.vo.manager.XuyuContentCardMgrSelfVo;
import com.xuyurepos.vo.manager.XuyuMessageLogVo;
import com.xuyurepos.vo.system.SystemOrgVo;
@Transactional
@Service
public class IccIdManagerServiceImpl implements IccIdManagerService{
	Logger logger=LoggerFactory.getInstance().getLogger(IccIdManagerServiceImpl.class);

	@Resource
	private XuyuContentCardMgrDao xuyuContentCardMgrDao;
	@Resource
	private XuyuContentCardInfoDao xuyuContentCardInfoDao;
	
	@Resource
	private XuyuMessageLogDao messageLogDao;
	
	@Resource
	private SystemOrgService systemOrgService;
	
	@javax.annotation.Resource
	private SqlSessionFactory sqlSessionFactory;
	
	public Connection getCon() {  
	    Connection connection = null;  
	    SqlSession sqlSession = sqlSessionFactory.openSession();  
	    connection = sqlSession.getConnection();  
	    return connection;  
	} 
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public void findList(PageModel pageModel) {
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		SystemUser systemUser=(SystemUser) request.getSession().getAttribute("systemUser");
		String orgId=systemUser.getOrgId();
		// 查找机构信息
		SystemOrgVo systemOrgVo=systemOrgService.find(orgId);
		if(systemOrgVo.getOrgLevel().equals("1")){
			// 代理商用户开始划卡
			logger.info("总部物联卡信息查询");
			XuyuContentCardMgrSelfVo xuyuContentCardMgrSelfVo=(XuyuContentCardMgrSelfVo)pageModel.getQueryObj();
			String agency=systemOrgVo.getOrgId();
			logger.info("agency:"+agency);
			xuyuContentCardMgrSelfVo.setAgency(agency);
			pageModel.setRows(xuyuContentCardInfoDao.selectUserListWithPage(pageModel));
		    pageModel.setTotal(xuyuContentCardInfoDao.selectUserCountWithPage(pageModel));
		}else{
			// 代理商用户开始划卡
			logger.info("代理商物联卡信息查询");
			XuyuContentCardMgrSelfVo xuyuContentCardMgrSelfVo=(XuyuContentCardMgrSelfVo)pageModel.getQueryObj();
			String agency=systemOrgVo.getOrgId();
			if(systemOrgVo.getOrgLevel().equals("2")){
				agency=agency.substring(0,agency.length()-1);
			}
			logger.info("agency:"+agency);
			xuyuContentCardMgrSelfVo.setAgency(agency);
			pageModel.setRows(xuyuContentCardInfoDao.selectUserListWithPage(pageModel));
		    pageModel.setTotal(xuyuContentCardInfoDao.selectUserCountWithPage(pageModel));
		}
		
	}
    
	/***
	 * 发送短信
	 */
	@Override
	public void messageSend(XuyuMessageLogVo xuyuMessageLogVo) throws CustomException {
		String accessNums=xuyuMessageLogVo.getAccessNums();
		String message=xuyuMessageLogVo.getMessage();
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		SystemUser systemUser=(SystemUser) request.getSession().getAttribute("systemUser");
		if(accessNums!=null&&!SystemConstants.STRINGEMPTY.equals(accessNums)){
			String[] accessNumStr=accessNums.split(";");
			if(accessNumStr.length>0){
				Calendar cal1 = Calendar.getInstance();
				cal1.setTime(new Date());
				XuyuMessageLog xuyuMessageLog=null;
				SynInfoFacadeService synInfoFacadeService=SynInfoFacadeService.getInstance();
				SynInfoJSFacadeService synInfoJSFacadeService=SynInfoJSFacadeService.getInstance();
				for (int i = 0; i < accessNumStr.length; i++) {
					XuyuContentCardInfo contentCardInfo=xuyuContentCardInfoDao.find(accessNumStr[i]);
					if(contentCardInfo!=null){
						String ownerPlace=contentCardInfo.getOwnerPlace();
						// 判定是否存在二级运营商
						if(ownerPlace==null||SystemConstants.STRINGEMPTY.equals(ownerPlace)){
							// 先保存数据
							xuyuMessageLog=new XuyuMessageLog();
							xuyuMessageLog.setProvider(contentCardInfo.getProvider());
							xuyuMessageLog.setOwnerPlace(SystemConstants.STRINGEMPTY);
							xuyuMessageLog.setAccessNum(contentCardInfo.getAccessNum());
							xuyuMessageLog.setCreateTime(cal1.getTime());
							xuyuMessageLog.setCreateUser(systemUser.getUserName());
							xuyuMessageLog.setCreateUserName(systemUser.getCname());
							xuyuMessageLog.setMessage(message);
							messageLogDao.insert(xuyuMessageLog);
							// 判定运营商
							if("1".equals(contentCardInfo.getProvider())){// 移动
								synInfoFacadeService.mobileMessageSendService(contentCardInfo.getImsi(), message);
							}else if("2".equals(contentCardInfo.getProvider())){//联通
								synInfoFacadeService.unicomMessageSendService(contentCardInfo.getIccid(), message);
							}else{
								// 电信直接报错
								throw new CustomException("电信卡不能发送短信");
							}
						}else{
							// 先保存数据
							xuyuMessageLog=new XuyuMessageLog();
							xuyuMessageLog.setProvider(contentCardInfo.getProvider());
							xuyuMessageLog.setOwnerPlace(ownerPlace);
							xuyuMessageLog.setAccessNum(contentCardInfo.getAccessNum());
							xuyuMessageLog.setCreateTime(cal1.getTime());
							xuyuMessageLog.setCreateUser(systemUser.getUserName());
							xuyuMessageLog.setCreateUserName(systemUser.getCname());
							xuyuMessageLog.setMessage(message);
							messageLogDao.insert(xuyuMessageLog);
							// 分别判定
							if("1".equals(ownerPlace)){// 淮安
								synInfoJSFacadeService.mobileMessageSendService(contentCardInfo.getImsi(), message, ownerPlace);
							}else if("2".equals(ownerPlace)){// 盐城
								synInfoJSFacadeService.mobileMessageSendService(contentCardInfo.getImsi(), message, ownerPlace);
							}else{// 其他
								synInfoFacadeService.mobileMessageSendService(contentCardInfo.getImsi(), message);
							}
						}
					}
				}
			}
		}
		
	}
    
	/**
	 * 用户状态更新
	 * @param xuyuMessageLogVo
	 * @throws CustomException 
	 */
	@Override
	public void userStatusQuery(XuyuMessageLogVo xuyuMessageLogVo) throws CustomException {
		String accessNums=xuyuMessageLogVo.getAccessNums();
		String workingCondition=SystemConstants.STRINGEMPTY;
		if(accessNums!=null&&!SystemConstants.STRINGEMPTY.equals(accessNums)){
			XuyuContentCardInfo contentCardInfo=xuyuContentCardInfoDao.find(accessNums);
			if(contentCardInfo!=null){
				SynInfoFacadeService synInfoFacadeService=SynInfoFacadeService.getInstance();
				SynInfoJSFacadeService synInfoJSFacadeService=SynInfoJSFacadeService.getInstance();
				String ownerPlace=contentCardInfo.getOwnerPlace();
				// 判定是否存在二级运营商
				if(ownerPlace==null||SystemConstants.STRINGEMPTY.equals(ownerPlace)){
					// 判定运营商
					if("1".equals(contentCardInfo.getProvider())){// 移动
						workingCondition=synInfoFacadeService.mobileUserStatusQuery(contentCardInfo.getImsi());
					}else if("2".equals(contentCardInfo.getProvider())){//联通
						workingCondition=synInfoFacadeService.unicomUserStatusQuery(contentCardInfo.getIccid());
					}else if("3".equals(contentCardInfo.getProvider())){//电信
						workingCondition=synInfoFacadeService.telecomUserStatusQuery(contentCardInfo.getImsi());
					}
				}else{
					// 分别判定
					if("1".equals(ownerPlace)){// 淮安
						workingCondition=synInfoJSFacadeService.mobileUserStatusQuery(contentCardInfo.getImsi(), ownerPlace);
					}else if("2".equals(ownerPlace)){// 盐城
						workingCondition=synInfoJSFacadeService.mobileUserStatusQuery(contentCardInfo.getImsi(), ownerPlace);
					}else{// 其他
						workingCondition=synInfoFacadeService.mobileUserStatusQuery(contentCardInfo.getImsi());
					}
				}
				if(!SystemConstants.STRINGEMPTY.equals(workingCondition)){
					try {
						contentCardInfo.setWorkingCondition(workingCondition);
						xuyuContentCardInfoDao.update(contentCardInfo);
					} catch (Exception e){
						e.printStackTrace();
						throw new CustomException("用户状态更新失败");
					
					}
				}
			}
			
		}
	}
    
	/**
	 * 流量实时查询
	 * @throws CustomException 
	 */
	@Override
	public void gprsQuery(XuyuMessageLogVo xuyuMessageLogVo) throws CustomException {
		String accessNums=xuyuMessageLogVo.getAccessNums();
		logger.info("请求数据："+accessNums);
		String gprs=SystemConstants.STRINGEMPTY;
		if(accessNums!=null&&!SystemConstants.STRINGEMPTY.equals(accessNums)){
			XuyuContentCardInfo contentCardInfo=xuyuContentCardInfoDao.find(accessNums);
			if(contentCardInfo!=null){
				SynInfoFacadeService synInfoFacadeService=SynInfoFacadeService.getInstance();
				SynInfoJSFacadeService synInfoJSFacadeService=SynInfoJSFacadeService.getInstance();
				String ownerPlace=contentCardInfo.getOwnerPlace();
				// 判定是否存在二级运营商
				if(ownerPlace==null||SystemConstants.STRINGEMPTY.equals(ownerPlace)){
					// 判定运营商
					if("1".equals(contentCardInfo.getProvider())){// 移动
						gprs=synInfoFacadeService.mobileUserStatusQuery(contentCardInfo.getImsi());
					}else if("2".equals(contentCardInfo.getProvider())){//联通
						gprs=synInfoFacadeService.unicomGPRSQueryService(contentCardInfo.getIccid());
					}else if("3".equals(contentCardInfo.getProvider())){//电信
						gprs=synInfoFacadeService.telecomGPRSQueryService(contentCardInfo.getImsi());
					}
				}else{
					// 分别判定
					if("1".equals(ownerPlace)){// 淮安
						gprs=synInfoJSFacadeService.mobileGPRSQueryService(contentCardInfo.getImsi(), ownerPlace);
					}else if("2".equals(ownerPlace)){// 盐城
						gprs=synInfoJSFacadeService.mobileGPRSQueryService(contentCardInfo.getImsi(), ownerPlace);
					}else{// 其他
						gprs=synInfoFacadeService.mobileGPRSQueryService(contentCardInfo.getImsi());
					}
				}
				if(!SystemConstants.STRINGEMPTY.equals(gprs)){
					logger.info("查询当前用量："+gprs);
					try {
						gprs=gprs.replace("MB", "");
						contentCardInfo.setUseGprs(BigDecimal.valueOf(Double.valueOf(gprs)));
						// 判断是否有群组，有群组直接算月份减
						// 无群组直接减
						if(SystemConstants.STRING_NO.equals(contentCardInfo.getMgrOwnFlag())){
							BigDecimal remainGps=contentCardInfo.getTotalGprs().subtract(contentCardInfo.getUseGprs());
							contentCardInfo.setRemainGps(remainGps);
						}else{
							BigDecimal remainGps=contentCardInfo.getTotalGprs().divide(BigDecimal.valueOf(Long.valueOf(contentCardInfo.getComboType()))).subtract(contentCardInfo.getUseGprs());
							contentCardInfo.setRemainGps(remainGps);
						}
						xuyuContentCardInfoDao.update(contentCardInfo);
					} catch (Exception e) {
						e.printStackTrace();
						throw new CustomException("流量实时查询失败");
					}
					
				}
			}
			
		}
	}
    
	/**
	 * 停复机
	 * @param xuyuMessageLogVo
	 * @throws CustomException 
	 */
	@Override
	public void changeCardState(String accessNums) throws CustomException {
		if(accessNums!=null&&!SystemConstants.STRINGEMPTY.equals(accessNums)){
			XuyuContentCardInfo contentCardInfo=xuyuContentCardInfoDao.find(accessNums);
			if(contentCardInfo!=null){
				SynInfoFacadeService synInfoFacadeService=SynInfoFacadeService.getInstance();
				SynInfoJSFacadeService synInfoJSFacadeService=SynInfoJSFacadeService.getInstance();
				String ownerPlace=contentCardInfo.getOwnerPlace();
				// 判定是否存在二级运营商
				if(ownerPlace==null||SystemConstants.STRINGEMPTY.equals(ownerPlace)){
					// 判定运营商
					if("1".equals(contentCardInfo.getProvider())){// 移动
						// 首先判定当前数据状态
						if("02".equals(contentCardInfo.getWorkingCondition())){
							synInfoFacadeService.mobileChangeCardState(contentCardInfo.getImsi(),"1");
						}else{
							synInfoFacadeService.mobileChangeCardState(contentCardInfo.getImsi(),"0");
						}
						
					}else if("2".equals(contentCardInfo.getProvider())){//联通
						if("RETIRED".equals(contentCardInfo.getWorkingCondition())){
							synInfoFacadeService.unicomChangeCardState(contentCardInfo.getIccid(),"1");
						}else{
							synInfoFacadeService.unicomChangeCardState(contentCardInfo.getIccid(),"0");
						}
						
					}else if("3".equals(contentCardInfo.getProvider())){//电信
						if("5".equals(contentCardInfo.getWorkingCondition())){
							synInfoFacadeService.telecomChangeCardState(contentCardInfo.getImsi(),"1");
						}else{
							synInfoFacadeService.telecomChangeCardState(contentCardInfo.getImsi(),"0");
						}
						
					}
				}else{
					// 分别判定
					if("1".equals(ownerPlace)){// 淮安
						if("02".equals(contentCardInfo.getWorkingCondition())){
							synInfoJSFacadeService.mobileChangeCardState(contentCardInfo.getImsi(), "1", ownerPlace);
						}else{
							synInfoJSFacadeService.mobileChangeCardState(contentCardInfo.getImsi(), "0", ownerPlace);
						}
					}else if("2".equals(ownerPlace)){// 盐城
						if("02".equals(contentCardInfo.getWorkingCondition())){
							synInfoJSFacadeService.mobileChangeCardState(contentCardInfo.getImsi(), "1", ownerPlace);
						}else{
							synInfoJSFacadeService.mobileChangeCardState(contentCardInfo.getImsi(), "0", ownerPlace);
						}
					}else{// 其他
						if("02".equals(contentCardInfo.getWorkingCondition())){
							synInfoFacadeService.mobileChangeCardState(contentCardInfo.getImsi(),"1");
						}else{
							synInfoFacadeService.mobileChangeCardState(contentCardInfo.getImsi(),"0");
						}
					}
				}
			}
			
		}
	}
    
	/**
	 * 设置备注
	 */
	@Override
	public void setMark(HttpServletRequest request) {
		String ids=request.getParameter("ids");
		String markFirst=request.getParameter("markFirst");
		if(!StringUtil.isEmpty(ids)){
			String[] idsStr=ids.split(SystemConstants.STRING_SENT);
			for (int i = 0; i < idsStr.length; i++) {
				if(!StringUtil.isEmpty(idsStr[i])){
					XuyuContentCardInfo contentCardInfo=xuyuContentCardInfoDao.findById(idsStr[i]);
					if(contentCardInfo!=null){
						contentCardInfo.setMarkFirst(markFirst);
						xuyuContentCardInfoDao.update(contentCardInfo);
					}
				}
			}
		}
	}

	@Override
	public Map<String, Object> exportData(XuyuContentCardMgrSelfVo xuyuContentCardMgrSelfVo) {
		Map<String ,Object> map=new HashMap<String,Object>();
		try {
			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		    String nowdate = DateUtil.convert(new Date(), "yyyy_MM_dd_HH_mm_ss");
			String nowdate1 = DateUtil.convert(new Date(), "yyyyMMdd");
			
			SystemUser systemUser=(SystemUser) request.getSession().getAttribute("systemUser");
			String userId=systemUser.getUserName();
			String filename="export_" + userId +"_"+ nowdate +".xlsx";
			String sheetName="Sheet";
			String filepath="";
			String path="";
			// 获取生成文件的路径
	        StringBuilder builder = new StringBuilder();
	        builder.append(ProsUtil.getProperty("exportPath")+File.separator+nowdate1);
	        // 查看目录是否存在
	        File file = new File(builder.toString());
			if (!file.exists()) {
				file.mkdir();
			}
	        if (!builder.toString().endsWith(File.separator)) {
	            builder.append(File.separator);
	        }
	        path=builder.toString();
	        filepath = path+filename;
	        String downLoadSize=ProsUtil.getProperty("downLoadSize");
	        StringBuffer sb=new StringBuffer("");
	        sb.append(" SELECT ");
	        sb.append(" t2.ACCESS_NUM,t2.ICCID,t2.IMSI, ");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='OPERATOR'  and a1.F_CODE=t2.PROVIDER) as PROVIDER,");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='PAY_TYPE'  and a1.F_CODE=t2.PAYMENT_TYPE) as PAYMENT_TYPE,	");
	        sb.append(" t2.AGENCY_NAME, ");
	        sb.append(" case when t2.PROVIDER='1' then  ");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='MOBILE_CARD_STATU'  and a1.F_CODE=t2.WORKING_CONDITION) ");
	        sb.append("  when t2.PROVIDER='2' then ");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='UNICOM_CARD_STATU'  and a1.F_CODE=t2.WORKING_CONDITION) ");
	        sb.append(" when t2.PROVIDER='3' then ");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='TELECOM_CARD_STATU'  and a1.F_CODE=t2.WORKING_CONDITION) ");
	        sb.append("  end WORKING_CONDITION, ");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='OWNER_COMBO_TYPE'  and a1.F_CODE=t2.COMBO_TYPE) as COMBO_TYPE,");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='OWNER_COMBO_NAME'  and a1.F_CODE=t2.COMNO_NAME) as COMNO_NAME,");
	        sb.append(" 	t2.USE_GPRS,t2.MESSAGE_COUNT,");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='OPERATOR_WAIT_TYPE'  and a1.F_CODE=t2.REAL_WAIT_TYPE) as REAL_WAIT_TYPE,	");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='OPERATOR_TEST_TYPE'  and a1.F_CODE=t2.REAL_TEST_TYPE) as REAL_TEST_TYPE,	");
	        sb.append(" t2.REAL_ESTABLISH,");
	        sb.append("	t2.REAL_ACTIVATE,");
	        sb.append(" t2.REAL_WAIT_DATE,");
	        sb.append(" (select a1.F_VALUE from SYSTEM_LOOKUP_ITEM a1 where a1.F_LOOKUP_ID='ONLINE_STATU'  and a1.F_CODE=t2.BILLING_STATUS) as BILLING_STATUS,");
	        sb.append("  t3.OWNER_NAME from (select * from XUYU_CONTENT_CARD_INFO WHERE 1=1 ");
	        if(xuyuContentCardMgrSelfVo!=null){
	        	 if(xuyuContentCardMgrSelfVo.getKeywords()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuContentCardMgrSelfVo.getKeywords())){
	 	        	sb.append(" AND ( ACCESS_NUM like '%"+xuyuContentCardMgrSelfVo.getKeywords()+"%' or ICCID like '%"+xuyuContentCardMgrSelfVo.getKeywords()+"%' or IMSI like '%"+xuyuContentCardMgrSelfVo.getKeywords()+"%'  )");
	 	         }
	        	 if(xuyuContentCardMgrSelfVo.getPaymentType()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuContentCardMgrSelfVo.getPaymentType())){
	        		 sb.append(" AND PAYMENT_TYPE='"+xuyuContentCardMgrSelfVo.getPaymentType()+"' ");
	        	 }
	        	 if(xuyuContentCardMgrSelfVo.getProvider()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuContentCardMgrSelfVo.getProvider())){
	        		 sb.append(" AND PROVIDER='"+xuyuContentCardMgrSelfVo.getProvider()+"'");
	        	 }
	        	 if(xuyuContentCardMgrSelfVo.getComboType()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuContentCardMgrSelfVo.getComboType())){
	        		 sb.append(" AND COMBO_TYPE='"+xuyuContentCardMgrSelfVo.getComboType()+"' ");
	        	 }
	        	 if(xuyuContentCardMgrSelfVo.getComboName()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuContentCardMgrSelfVo.getComboName())){
	        		 sb.append("  AND COMNO_NAME='"+xuyuContentCardMgrSelfVo.getComboName()+"'");
	        	 }
	        	 
	        }
	       
	        sb.append("  ) t2  left JOIN XUYU_OWNER_INFO t3 ON t2.`OWNER` = t3.ID and EXISTS  ");
	        sb.append(" ( SELECT * FROM SYSTEM_AUTH_ORG t1 where t1.ORG_ID like '1000%' and t1.ID=t2.AGENCY ) ");
	        sb.append(" order by t2.ACCESS_NUM,t2.IMSI,t2.ICCID limit  "+downLoadSize);
	        logger.info("下载的sql:"+sb.toString());
        	String[] colmnsList = {
        			"接入号",
        			"iccid",
        			"imsi",
        			"运营商",
        			"支付类型",
        			"客户名称",
        			"卡状态",
        			"套餐类型",
        			"套餐",
        			"当月用量(MB)",
        			"已发短信",
        			"沉默期类型(实际)",
        			"测试期类型(实际)",
        			"开户日期 (实际)",
        			"激活日期 (实际)",
        			"沉默期到期时间(实际)",
        			"在线状态"

		  	};
			// 字段映射
			Map<String, String> fieldLabel=new HashMap<String, String>();
			fieldLabel.put("ACCESS_NUM", "接入号");
			fieldLabel.put("ICCID", "ICCID");
			fieldLabel.put("IMSI", "IMSI");
			fieldLabel.put("PROVIDER", "运营商");
			fieldLabel.put("PAYMENT_TYPE", "支付类型");
			fieldLabel.put("AGENCY_NAME", "客户名称");
			fieldLabel.put("WORKING_CONDITION", "卡状态");
			fieldLabel.put("COMBO_TYPE", "套餐类型");
			fieldLabel.put("COMNO_NAME", "套餐");
			fieldLabel.put("USE_GPRS", "当月用量");
			fieldLabel.put("MESSAGE_COUNT", "已发短信");
			fieldLabel.put("REAL_WAIT_TYPE", "沉默期类型(实际)");
			fieldLabel.put("REAL_TEST_TYPE", "测试期类型(实际)");
			fieldLabel.put("REAL_ESTABLISH", "开户日期 (实际)");
			fieldLabel.put("REAL_ACTIVATE", "激活日期 (实际)");
			fieldLabel.put("REAL_WAIT_DATE", "沉默期到期时间(实际)");
			fieldLabel.put("BILLING_STATUS", "在线状态");
			BigDataExcelOutWrite bdeo = new BigDataExcelOutWrite(filepath,sheetName,"",colmnsList,fieldLabel);
			bdeo.WriteExcel(false,getCon(),sb.toString());

			map.put("filename", filename);
			map.put("annexeName", "物联卡信息导出.xlsx");
			map.put("filepath", path);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

}
