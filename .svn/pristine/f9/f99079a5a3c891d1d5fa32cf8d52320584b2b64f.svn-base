package com.xuyurepos.service.impl.payment;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.xuyurepos.common.constants.SystemConstants;
import com.xuyurepos.common.exception.CustomException;
import com.xuyurepos.common.log.LoggerFactory;
import com.xuyurepos.common.page.PageModel;
import com.xuyurepos.common.util.DateUtil;
import com.xuyurepos.dao.manager.XuyuContentCardInfoDao;
import com.xuyurepos.dao.payment.XuyuRechargeDao;
import com.xuyurepos.entity.manager.XuyuContentCardInfo;
import com.xuyurepos.entity.payment.XuyuRecharge;
import com.xuyurepos.entity.system.SystemUser;
import com.xuyurepos.service.payment.XuyuRechargeService;
import com.xuyurepos.service.system.SystemOrgService;
import com.xuyurepos.vo.payment.XuyuRechargeVo;
import com.xuyurepos.vo.system.SystemOrgVo;
/**
 * 充值处理实现类
 * @author yangfei
 *
 */
@Service
@Transactional
public class XuyuRechargeServiceImpl implements XuyuRechargeService{
	Logger logger=LoggerFactory.getInstance().getLogger(XuyuRechargeServiceImpl.class);
	
	@Resource
	private  XuyuRechargeDao xuyuRechargeDao;
	
	@Resource
	private SystemOrgService systemOrgService;
	
	@Resource
	private XuyuContentCardInfoDao xuyuContentCardInfoDao;
    
	/**
	 * 保存方法
	 * @throws CustomException 
	 */
	@Override
	public void saveInfo(XuyuRechargeVo xuyuRechargeVo) throws Exception {
		logger.info(" saveInfo(XuyuRechargeVo xuyuRechargeVo) XuyuRechargeServiceImpl start");
		logger.info("xuyuRechargeVo:"+xuyuRechargeVo.toString());
		if(xuyuRechargeVo.getId()!=null&&!SystemConstants.STRINGEMPTY.equals(xuyuRechargeVo.getId())){
			edit(xuyuRechargeVo);
		}else{
			add(xuyuRechargeVo);
		}
		logger.info(" saveInfo(XuyuRechargeVo xuyuRechargeVo) XuyuRechargeServiceImpl end");
	}
    
	/**
	 * 修改数据
	 * @param xuyuRechargeVo
	 * @return
	 */
	private XuyuRecharge edit(XuyuRechargeVo xuyuRechargeVo) {
		XuyuRecharge xuyuRecharge=xuyuRechargeDao.find(Integer.valueOf(xuyuRechargeVo.getId()));
		if(xuyuRecharge!=null){
			BeanUtils.copyProperties(xuyuRechargeVo, xuyuRecharge);
			xuyuRechargeDao.update(xuyuRecharge);
		}
		return xuyuRecharge;
	}
    
	/**
	 * 添加数据
	 * @param xuyuRechargeVo
	 * @return
	 * @throws Exception 
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void add(XuyuRechargeVo xuyuRechargeVo) throws Exception {
		try {
			XuyuRecharge xuyuRecharge=null;
			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
			SystemUser systemUser=(SystemUser) request.getSession().getAttribute("systemUser");
			String orgId=systemUser.getOrgId();
			// 查找机构信息
			SystemOrgVo systemOrgVo=systemOrgService.find(orgId);
			// 判断是否为卡段充值
			if(SystemConstants.STRING_YES.equals(xuyuRechargeVo.getYesNo())){
				if(systemOrgVo.getOrgLevel().equals("1")){
					int result=xuyuContentCardInfoDao.findCount(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd());
					logger.info("result:"+result);
					if(result>100000){
						throw new CustomException("一次充值最多100000张卡");
					}else{
						// 首先判断数据有没有设置套餐
						result=xuyuContentCardInfoDao.findComboType(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd());
						if(result>0){
							throw new CustomException("还未设置套餐，请先设置套餐");
						}
						Calendar calendar = Calendar.getInstance();
						calendar.setTime(new Date());
						xuyuRecharge=new XuyuRecharge();
						xuyuRechargeVo.setIsPay(SystemConstants.STRING_YES);
						xuyuRechargeVo.setCreateUser(systemUser.getUserName());
						xuyuRechargeVo.setCreateOrg(systemUser.getOrgId());
						xuyuRechargeVo.setCreateDate(calendar.getTime());
						HashMap map=new HashMap();
						map.put("record", xuyuRechargeVo);
						xuyuRechargeDao.insertAccs(map);
						// 更新套餐总量
						xuyuContentCardInfoDao.updateTotalGprsAdd(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd(),xuyuRechargeVo.getChargeCost());
						xuyuContentCardInfoDao.updateTotalGprs(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd(),xuyuRechargeVo.getChargeCost());
						// 插入并且更新临时表
						map=new HashMap();
						map.put("accessNumStart", xuyuRechargeVo.getAccessNumStart());
						map.put("accessNumEnd", xuyuRechargeVo.getAccessNumEnd());
						xuyuContentCardInfoDao.truncateTable();
						xuyuContentCardInfoDao.insertInfoOwnerTemp(map);
						// 更新满期日
						xuyuContentCardInfoDao.updateDeadlineDateAdd(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd(),xuyuRechargeVo.getChargeCost());
						xuyuContentCardInfoDao.updateDeadlineDate(xuyuRechargeVo.getAccessNumStart(), xuyuRechargeVo.getAccessNumEnd(),xuyuRechargeVo.getChargeCost());
					}
				}else{
					throw new CustomException("超出当前用户权限，只有总部用户才能充值");
				}
			}else{
				if(systemOrgVo.getOrgLevel().equals("1")){
					String accessNums=xuyuRechargeVo.getAccessNums();
					if(accessNums!=null&&!SystemConstants.STRINGEMPTY.equals(accessNums)){
						Calendar calendar = Calendar.getInstance();
						calendar.setTime(new Date());
						String[] accessNumStr=accessNums.split(";");
						for (int i = 0; i < accessNumStr.length; i++) {
							XuyuContentCardInfo xuyuContentCardInfo=xuyuContentCardInfoDao.find(accessNumStr[i]);
							xuyuRecharge=new XuyuRecharge();
							// 设置后台充值
							BigDecimal money=xuyuContentCardInfo.getUnitCost().multiply(BigDecimal.valueOf(Long.valueOf(xuyuRechargeVo.getChargeCost())));
							if(xuyuContentCardInfo.getComboType()==null||SystemConstants.STRINGEMPTY.equals(xuyuContentCardInfo.getComboType())){
								throw new CustomException("还未设置套餐，请先设置套餐");
							}
							if(xuyuContentCardInfo.getComnoName()==null||SystemConstants.STRINGEMPTY.equals(xuyuContentCardInfo.getComnoName())){
								throw new CustomException("还未设置套餐，请先设置套餐");
							}
							BigDecimal totalGprs=BigDecimal.valueOf(Long.valueOf(xuyuContentCardInfo.getComboType())).multiply(BigDecimal.valueOf(Long.valueOf(xuyuContentCardInfo.getComnoName()))).multiply(BigDecimal.valueOf(Long.valueOf(xuyuRechargeVo.getChargeCost())));
							xuyuRecharge.setAccessNum(xuyuContentCardInfo.getAccessNum());
							xuyuRecharge.setComboType(xuyuContentCardInfo.getComboType());
							xuyuRecharge.setComnoName(xuyuContentCardInfo.getComnoName());
							xuyuRecharge.setTotalGprs(totalGprs);
							xuyuRecharge.setPrice(xuyuContentCardInfo.getUnitCost());
							xuyuRecharge.setMoney(money);
							xuyuRecharge.setIsPay(SystemConstants.STRING_YES);
							xuyuRecharge.setCreateUser(systemUser.getUserName());
							xuyuRecharge.setCreateOrg(systemUser.getOrgId());
							xuyuRecharge.setCreateDate(calendar.getTime());
							xuyuRechargeDao.insert(xuyuRecharge);
							// 设置套餐总量
							// 如果套餐总量为空则直接设置
							if(xuyuContentCardInfo.getTotalGprs()==null||SystemConstants.STRINGEMPTY.equals(xuyuContentCardInfo.getTotalGprs())){
								xuyuContentCardInfo.setTotalGprs(totalGprs);
							}else{
								// 如果已经存在套餐则需要累加
								BigDecimal totalGprsNew=xuyuContentCardInfo.getTotalGprs().add(totalGprs);
								xuyuContentCardInfo.setTotalGprs(totalGprsNew);
							}
							String testType=xuyuContentCardInfo.getTestType();
							String waitType=xuyuContentCardInfo.getWaitType();
							// 没有测试期和成默契直接计算
							if(SystemConstants.STRINGEMPTY.equals(testType)
									   &&SystemConstants.STRINGEMPTY.equals(waitType)){
								// 如果是多个则需要增加
								// 重新计算满期日期
                                // 判断是否存在满期日
								if(xuyuContentCardInfo.getDeadlineDate()==null){
									Date deadlineDate=DateUtil.getLastMonthdate(xuyuContentCardInfo.getActivateDate(), Integer.valueOf(xuyuRechargeVo.getChargeCost())*Integer.valueOf(xuyuContentCardInfo.getComboType()));
									xuyuContentCardInfo.setDeadlineDate(deadlineDate);
								}else{
									Date deadlineDate=DateUtil.getLastMonthdate(xuyuContentCardInfo.getDeadlineDate(), Integer.valueOf(xuyuRechargeVo.getChargeCost())*Integer.valueOf(xuyuContentCardInfo.getComboType())+1);
									logger.info("到期时间："+DateUtil.convert(deadlineDate, null));
									xuyuContentCardInfo.setDeadlineDate(deadlineDate);
								}
							}else{
								// 如果沉默期和测试期存在的情况
								// 得需要更新的时候计算
							}
							xuyuContentCardInfoDao.update(xuyuContentCardInfo);
						}
					}else{
						throw new CustomException("非卡段充值，请选择需要充值的数据");
					}
				}else{
					throw new CustomException("超出当前用户权限，只有总部用户才能充值");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
    
	/**
	 * 充值记录查询
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public void findList(PageModel pageModel) {
		try {
			pageModel.setRows(xuyuRechargeDao.selectUserListWithPage(pageModel));
		    pageModel.setTotal(xuyuRechargeDao.selectUserCountWithPage(pageModel));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
