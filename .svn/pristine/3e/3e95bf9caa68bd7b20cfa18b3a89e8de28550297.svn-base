package com.xuyurepos.service.impl.manager;

import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xuyurepos.common.log.LoggerFactory;
import com.xuyurepos.dao.comm.CommonMapper;
import com.xuyurepos.dao.manager.ImportTempDao;
import com.xuyurepos.dao.manager.XuyuContentCardInfoImportDao;
import com.xuyurepos.dao.manager.XuyuContentCardMgrDao;
import com.xuyurepos.entity.system.SystemAnnexe;
import com.xuyurepos.service.manager.ImportTempService;
import com.xuyurepos.service.system.SystemAnnexeService;
/**
 * 临时表处理
 * @author yangfei
 *
 */
@Transactional
@Service
public class ImportTempServiceImpl implements ImportTempService{
	Logger logger=LoggerFactory.getInstance().getLogger(ImportTempServiceImpl.class);

	@Resource
	private ImportTempExcelParse importTempExcelParse;
	@Resource
	private ImportTempExcelMoreParse importTempExcelMoreParse;
	@Resource
	private SystemAnnexeService systemAnnexeService;
	@Resource
	private ImportTempDao importTempDao;
	@Resource
	private XuyuContentCardMgrDao xuyuContentCardMgrDao;
	@Resource
	private XuyuContentCardInfoImportDao xuyuContentCardInfoImportDao;
	
	@Resource
	private CommonMapper commonMapper;
	
	/*
	 * 首次数据导入库
	 * 注意异常不能抛出，否则会导致任务异常
	 * (non-Javadoc)
	 * @see com.xuyurepos.service.manager.ImportTempService#anaLysisData(java.lang.String)
	 */
	@Override
	public void anaLysisData(String batchNo) {
		if(batchNo==null||"".equals(batchNo)){
			logger.error("解析异常：没有正确传入参数");
		}else{
			try {
				SystemAnnexe annexe=new SystemAnnexe();
				annexe.setUploadBatchno(batchNo);
				List<SystemAnnexe> list=systemAnnexeService.getList(annexe);
				if(list.size()>0){
					for (int i = 0; i < list.size(); i++) {
						annexe=list.get(i);
						logger.info("解析数据目录");
						importTempExcelParse.anaLysisData(annexe.getUploadPath());
						// 解析完成后操作
						// 第一步确认数据是移动联通还是电信
						// 移动1联通2电信3
						if("1".equals(annexe.getRelationInfo())){
							insertYd(annexe, batchNo);
						}else if("2".equals(annexe.getRelationInfo())){
							insertLt(annexe, batchNo);
						}else if("3".equals(annexe.getRelationInfo())){
							insertDx(annexe, batchNo);
						}
					}
				}
			} catch (Exception e) {
				logger.error("导入异常："+e.getMessage());
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 移动首次导入
	 * @param annexe
	 * @param batchNo
	 */
	private void insertYd(SystemAnnexe annexe,String batchNo){
		// 第一步删除无效数据
		importTempDao.delYd();
		// 第二部分数据校验
		int j = importTempDao.getCountYd();
		if (j == 0) {
			// 通过逻辑计算套餐总量
			// 目标表没数据，直接插入表数据
			xuyuContentCardMgrDao.insertYd("1", annexe.getRelationMod(), batchNo, annexe.getComboType(),
					annexe.getWaitType(), annexe.getTestType(), annexe.getCardType(), annexe.getStandard(),
					annexe.getUnitCost());
		} else {
			// 插入日志表
			logger.info("没有插入的数据");
		}
	}
	
	/**
	 * 联通首次导入
	 * @param annexe
	 * @param batchNo
	 */
	private void insertLt(SystemAnnexe annexe,String batchNo){
		// 联通导入
		// 第一步删除无效数据
		importTempDao.delLt();
		// 第二部分数据校验
		int j = importTempDao.getCountLt();
		if (j == 0) {
			// 目标表没数据，直接插入表数据
			xuyuContentCardMgrDao.insertLt("2", batchNo, annexe.getComboType(), annexe.getWaitType(),
					annexe.getTestType(), annexe.getCardType(), annexe.getStandard(), annexe.getUnitCost());
		} else {
			// 插入日志表
			logger.info("没有插入的数据");
		}
	}
	
	/**
	 * 电信首次导入
	 * @param annexe
	 * @param batchNo
	 */
	private void insertDx(SystemAnnexe annexe,String batchNo){
		// 电信导入
		// 第一步删除无效数据
		importTempDao.delDx();
		// 第二部分数据校验
		int j = importTempDao.getCountDx();
		if (j == 0) {
			// 目标表没数据，直接插入表数据
			xuyuContentCardMgrDao.insertDx("3", batchNo, annexe.getComboType(), annexe.getWaitType(),
					annexe.getTestType(), annexe.getCardType(), annexe.getStandard(), annexe.getUnitCost());
		} else {
			// 插入日志表
			System.out.println("没有插入的数据");
		}
	}
    
	/*
	 * 数据更新逻辑
	 * (non-Javadoc)
	 * @see com.xuyurepos.service.manager.ImportTempService#anaLysisUpdateData(java.lang.String)
	 */
	@Override
	public void anaLysisUpdateData(String batchNo) {
		if(batchNo==null||"".equals(batchNo)){
			logger.error("更新解析异常：没有正确传入参数");
		}else{
			try {
				SystemAnnexe annexe=new SystemAnnexe();
				annexe.setUploadBatchno(batchNo);
				List<SystemAnnexe> list=systemAnnexeService.getList(annexe);
				if(list.size()>0){
					for (int i = 0; i < list.size(); i++) {
						annexe=list.get(i);
						logger.info("更新解析数据目录");
						importTempExcelMoreParse.anaLysisData(annexe.getUploadPath());
						// 解析完成后操作
						// 第一步确认数据是移动联通还是电信
						// 移动1联通2电信3
						if("1".equals(annexe.getRelationInfo())){
							updateYd(batchNo);
						}else if("2".equals(annexe.getRelationInfo())){
							updateLt(batchNo);
						}else if("3".equals(annexe.getRelationInfo())){
							updateDx(batchNo);
						}
					}
				}
			} catch (Exception e) {
				logger.error("更新数据异常："+e.getMessage());
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 移动数据更新
	 * @param batchNo
	 */
	private void updateYd(String batchNo){
		//第一步删除无效数据
		StringBuilder sb=new StringBuilder();
		sb.append(" delete from IMPORT_TEMP  where B='卡号备注' AND C='IMSI' AND D='ICCID' ");
		commonMapper.executeAction(sb.toString());
		
		//第二步校验数据是否已经更新过
	    sb=new StringBuilder();
		sb.append(" select count(1) as a from XUYU_CONTENT_CARD_MGR a where 1=1 and  exists ");
		sb.append(" (select 1 from IMPORT_TEMP  b where b.A=a.ACCESS_NUM )");
		long j=commonMapper.findCount(sb.toString());
		if(j==0){
			sb=new StringBuilder();
			sb.append("  insert into XUYU_CONTENT_CARD_INFO_IMPORT (ID, ACCESS_NUM, ICCID, ");
			sb.append("  IMSI, PROVIDER, OWNER_PLACE, ");
			sb.append("  AGENCY, CARD_KIND, BILLING_STATUS, ");
			sb.append("  COMBO_TYPE, COMNO_NAME, TOTAL_GPRS, ");
			sb.append("  REMAIN_GPS, USE_GPRS, MESSAGE_COUNT, ");
			sb.append("  ESTABLISH_DATE, ACTIVATE_DATE, DEADLINE_DATE, ");
			sb.append("  WAIT_TYPE, WAIT_DATE, WORKING_CONDITION, ");
			sb.append("  OWNER, PAYMENT_TYPE, REAL_ESTABLISH, ");
			sb.append("  REAL_ACTIVATE, REAL_DEADLINE, REAL_COMBOTYPE, ");
			sb.append("  REAL_COMBONAME, UNIT_COST, MONTH_FEE, ");
			sb.append("  AGENCY_FEE, REVENUE_FEE, LASTMONTH_FEE, ");
			sb.append("  REMAIN_FEE, REAL_PROFIT, AGENCY_PROFIT, ");
			sb.append("  MARK, PARENT_AGENTCY, MARK_FIRST, ");
			sb.append("  MARK_PROFIT, CREATE_USER, UPDATE_USER, ");
			sb.append("  IMPORT_BATCHNO, EXPORT_BATCHNO, MGR_OWN_FLAG, ");
			sb.append("  AGENCY_NAME, CREATE_DATE, UPDATE_DATE, ");
			sb.append("  DOWNLOAD_DATE, IS_DEAL)");
			
			sb.append(" select _nextval('cardImport'),");
			sb.append(" ACCESS_NUM, ICCID, ");
			sb.append(" IMSI, PROVIDER, OWNER_PLACE, ");
			sb.append(" AGENCY, CARD_KIND, t2.H as BILLING_STATUS, ");
			sb.append(" COMBO_TYPE, COMNO_NAME, TOTAL_GPRS, ");
			sb.append(" REMAIN_GPS, t2.I as USE_GPRS,t2.j as MESSAGE_COUNT, ");
			sb.append(" ESTABLISH_DATE, ACTIVATE_DATE, DEADLINE_DATE, ");
			sb.append(" WAIT_TYPE, WAIT_DATE,t2.G WORKING_CONDITION, ");
			sb.append(" OWNER, PAYMENT_TYPE, ");
			sb.append(" STR_TO_DATE(if(t2.K='', null , t2.K),'%Y-%m-%d') as REAL_ESTABLISH, ");
			sb.append(" STR_TO_DATE(if(t2.L='', null , t2.L),'%Y-%m-%d') as REAL_ACTIVATE,");
			sb.append(" REAL_DEADLINE, ");
			sb.append("	REAL_COMBOTYPE, ");
			sb.append(" REAL_COMBONAME, UNIT_COST, MONTH_FEE, ");
			sb.append(" AGENCY_FEE, REVENUE_FEE, LASTMONTH_FEE, ");
			sb.append(" REMAIN_FEE, REAL_PROFIT, AGENCY_PROFIT, ");
			sb.append(" MARK, PARENT_AGENTCY, MARK_FIRST, ");
			sb.append(" MARK_PROFIT, CREATE_USER, UPDATE_USER, ");
			sb.append(" "+batchNo+" as IMPORT_BATCHNO, EXPORT_BATCHNO, MGR_OWN_FLAG, ");
			sb.append(" AGENCY_NAME, CREATE_DATE, UPDATE_DATE, ");
			sb.append(" DATE_SUB(curdate(),INTERVAL 1 DAY) as DOWNLOAD_DATE, ");
			sb.append("	'y' as IS_DEAL  from XUYU_CONTENT_CARD_INFO t1 inner join IMPORT_TEMP   t2 on");
			sb.append("	t1.ACCESS_NUM=t2.A ");
			commonMapper.executeAction(sb.toString());
		}else{
			// 数据已经插入的，针对已经存在的做更新操作，
			// 不存在的做插入操作
			sb=new StringBuilder();
			sb.append("	update XUYU_CONTENT_CARD_INFO_IMPORT t3");
			sb.append("	 set ");
			sb.append("	t3.WORKING_CONDITION=(select a1.G from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.BILLING_STATUS=(select a1.H from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.USE_GPRS=(select a1.I from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.MESSAGE_COUNT=(select a1.J from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.REAL_ESTABLISH=(select STR_TO_DATE(if(a1.K='', null , a1.K),'%Y-%m-%d') from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.REAL_ACTIVATE=(select STR_TO_DATE(if(a1.L='', null , a1.L),'%Y-%m-%d') from IMPORT_TEMP a1 where a1.A=t3.ACCESS_NUM),");
			sb.append("	t3.IMPORT_BATCHNO="+batchNo+"");
			sb.append("	where");
			sb.append("	EXISTS (select * from IMPORT_TEMP t4 where t4.A=t3.ACCESS_NUM)");
			sb.append("	and  t3.DOWNLOAD_DATE= DATE_SUB(curdate(),INTERVAL 1 DAY) ");
			commonMapper.executeAction(sb.toString());
			
			sb=new StringBuilder();
			sb.append(" insert into XUYU_CONTENT_CARD_INFO_IMPORT (ID, ACCESS_NUM, ICCID,  ");
			sb.append("  IMSI, PROVIDER, OWNER_PLACE,  ");
			sb.append("  AGENCY, CARD_KIND, BILLING_STATUS,  ");
			sb.append("  COMBO_TYPE, COMNO_NAME, TOTAL_GPRS,  ");
			sb.append("  REMAIN_GPS, USE_GPRS, MESSAGE_COUNT,  ");
			sb.append("  ESTABLISH_DATE, ACTIVATE_DATE, DEADLINE_DATE,  ");
			sb.append("  WAIT_TYPE, WAIT_DATE, WORKING_CONDITION,  ");
			sb.append("  OWNER, PAYMENT_TYPE, REAL_ESTABLISH,  ");
			sb.append("  REAL_ACTIVATE, REAL_DEADLINE, REAL_COMBOTYPE,  ");
			sb.append("  REAL_COMBONAME, UNIT_COST, MONTH_FEE,  ");
			sb.append("  AGENCY_FEE, REVENUE_FEE, LASTMONTH_FEE,  ");
			sb.append("  REMAIN_FEE, REAL_PROFIT, AGENCY_PROFIT,  ");
			sb.append("  MARK, PARENT_AGENTCY, MARK_FIRST,  ");
			sb.append("  MARK_PROFIT, CREATE_USER, UPDATE_USER,  ");
			sb.append("  IMPORT_BATCHNO, EXPORT_BATCHNO, MGR_OWN_FLAG,  ");
			sb.append("  AGENCY_NAME, CREATE_DATE, UPDATE_DATE,  ");
			sb.append("  DOWNLOAD_DATE, IS_DEAL) ");
			sb.append("	 select _nextval('cardImport'),");
			sb.append("	 ACCESS_NUM, ICCID, ");
			sb.append("	 IMSI, PROVIDER, OWNER_PLACE, ");
			sb.append("  AGENCY, CARD_KIND, t2.H as BILLING_STATUS, ");
			sb.append("  COMBO_TYPE, COMNO_NAME, TOTAL_GPRS, ");
			sb.append("  REMAIN_GPS, t2.I as USE_GPRS,t2.j as MESSAGE_COUNT, ");
			sb.append("  ESTABLISH_DATE, ACTIVATE_DATE, DEADLINE_DATE, ");
			sb.append("  WAIT_TYPE, WAIT_DATE,t2.G WORKING_CONDITION, ");
			sb.append("  OWNER, PAYMENT_TYPE, ");
			sb.append("  STR_TO_DATE(if(t2.K='', null , t2.K),'%Y-%m-%d') as REAL_ESTABLISH, ");
			sb.append("  STR_TO_DATE(if(t2.L='', null , t2.L),'%Y-%m-%d') as REAL_ACTIVATE,");
			sb.append("  REAL_DEADLINE, ");
			sb.append("  REAL_COMBOTYPE, ");
			sb.append("  REAL_COMBONAME, UNIT_COST, MONTH_FEE, ");
			sb.append("  AGENCY_FEE, REVENUE_FEE, LASTMONTH_FEE, ");
			sb.append("  REMAIN_FEE, REAL_PROFIT, AGENCY_PROFIT, ");
			sb.append("  MARK, PARENT_AGENTCY, MARK_FIRST, ");
			sb.append("  MARK_PROFIT, CREATE_USER, UPDATE_USER, ");
			sb.append("  "+batchNo+" as IMPORT_BATCHNO, EXPORT_BATCHNO, MGR_OWN_FLAG, ");
			sb.append("  AGENCY_NAME, CREATE_DATE, UPDATE_DATE, ");
			sb.append("  DATE_SUB(curdate(),INTERVAL 1 DAY) as DOWNLOAD_DATE, ");
			sb.append("  'y' as IS_DEAL  from ");
			sb.append("  (select * from XUYU_CONTENT_CARD_INFO a1 where");
			sb.append("  not EXISTS ( ");
			sb.append("	 select * from XUYU_CONTENT_CARD_INFO_IMPORT t3 where ");
			sb.append("	 EXISTS (select * from IMPORT_TEMP t4 where t4.A=t3.ACCESS_NUM) ");
			sb.append("	 and  t3.DOWNLOAD_DATE= DATE_SUB(curdate(),INTERVAL 1 DAY) ");
			sb.append("	 and t3.ACCESS_NUM=a1.ACCESS_NUM  ");
			sb.append("  )   ");
			sb.append("  ) t1 ");
			sb.append("  inner join IMPORT_TEMP   t2 on ");
			sb.append("  t1.ACCESS_NUM=t2.A ");
			commonMapper.executeAction(sb.toString());
		}
		// 更新主表内容
		sb=new StringBuilder();
		sb.append("  update XUYU_CONTENT_CARD_INFO t1 set ");
		sb.append("  t1.USE_GPRS=(select a1.USE_GPRS from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+"), ");
		sb.append("  t1.MESSAGE_COUNT=(select a1.MESSAGE_COUNT from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+" ), ");
		sb.append("  t1.BILLING_STATUS=(select a1.BILLING_STATUS from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+" ), ");
		sb.append("  t1.WORKING_CONDITION=(select a1.WORKING_CONDITION from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+"), ");
		sb.append("  t1.REAL_ESTABLISH=(select a1.REAL_ESTABLISH from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+"), ");
		sb.append("  t1.REAL_ACTIVATE=(select a1.REAL_ACTIVATE from XUYU_CONTENT_CARD_INFO_IMPORT a1 where a1.ACCESS_NUM=t1.ACCESS_NUM and a1.IMPORT_BATCHNO="+batchNo+") ");
		sb.append("  where EXISTS ( ");
		sb.append("  select * from XUYU_CONTENT_CARD_INFO_IMPORT t2 where t2.ACCESS_NUM=t1.ACCESS_NUM and t2.IMPORT_BATCHNO="+batchNo+" ");
		sb.append("  ) ");
		commonMapper.executeAction(sb.toString());
		
		// 计算剩余流量
		sb=new StringBuilder();
		sb.append(" update XUYU_CONTENT_CARD_INFO t1  set");
		sb.append(" t1.REMAIN_GPS=if(t1.TOTAL_GPRS is null, 0 , (t1.TOTAL_GPRS-USE_GPRS))");
		sb.append(" where EXISTS (");
		sb.append(" select * from XUYU_CONTENT_CARD_INFO_IMPORT t2 where t2.ACCESS_NUM=t1.ACCESS_NUM and t2.IMPORT_BATCHNO="+batchNo+"");
		sb.append(" ) and t1.MGR_OWN_FLAG='n' ");
		commonMapper.executeAction(sb.toString());
		
		// 计算激活时间没有测试期的
		sb=new StringBuilder();
		sb.append("  update XUYU_CONTENT_CARD_INFO t1");
		sb.append("	 set t1.ACTIVATE_DATE=SYSDATE()");
		sb.append("	 WHERE");
		sb.append("	 EXISTS ( SELECT * FROM XUYU_CONTENT_CARD_INFO_IMPORT");
		sb.append("	 t2 WHERE t2.ACCESS_NUM = t1.ACCESS_NUM AND t2.IMPORT_BATCHNO ="+batchNo+" ) ");
		sb.append("	 and t1.ACTIVATE_DATE is null and t1.TEST_TYPE is null and t1.USE_GPRS!=0.0000");
		commonMapper.executeAction(sb.toString());
		
		// 计算激活时间有测试期的
		sb=new StringBuilder();
		sb.append("  update  XUYU_CONTENT_CARD_INFO t1 ");
		sb.append("	 set t1.ACTIVATE_DATE=if(SYSDATE()<= last_day(date_sub(t1.ESTABLISH_DATE,interval  -(t1.TEST_TYPE-1) month)),null,SYSDATE()) ");
		sb.append("	 WHERE ");
		sb.append("	 EXISTS ( SELECT * FROM XUYU_CONTENT_CARD_INFO_IMPORT ");
		sb.append("	 t2 WHERE t2.ACCESS_NUM = t1.ACCESS_NUM AND t2.IMPORT_BATCHNO ="+batchNo+" )  ");
		sb.append("	 and t1.ACTIVATE_DATE is null  and t1.USE_GPRS!=0.0000  and t1.TEST_TYPE is not null ");
		commonMapper.executeAction(sb.toString());
		
		// 计算到期时间
		sb=new StringBuilder();
		sb.append(" update  XUYU_CONTENT_CARD_INFO t1 ");
		sb.append("	set t1.DEADLINE_DATE=last_day(date_sub(t1.ESTABLISH_DATE,interval -(t1.COMBO_TYPE-1) month)) ");
		sb.append("	WHERE ");
		sb.append("	EXISTS ( SELECT * FROM XUYU_CONTENT_CARD_INFO_IMPORT ");
		sb.append("	t2 WHERE t2.ACCESS_NUM = t1.ACCESS_NUM AND t2.IMPORT_BATCHNO ="+batchNo+"  )  ");
		sb.append("	and t1.ACTIVATE_DATE is not null and t1.DEADLINE_DATE is null ");
		commonMapper.executeAction(sb.toString());
		
		
		
//		// 第一步删除无效数据
//		importTempDao.delYd();
//		// 值类型转换
//		xuyuContentCardInfoImportDao.updateYd();
//		// 第二步校验数据是否已经更新过
//		int j = xuyuContentCardInfoImportDao.getCountYd();
//		if (j == 0) {
//			// 还没操作的直接插入
//			xuyuContentCardInfoImportDao.insertMobilInfo(batchNo);
//		} else {
//			// 数据已经插入的，针对已经存在的做更新操作，
//			// 不存在的做插入操作
//			xuyuContentCardInfoImportDao.updateExistsMobilInfo(batchNo);
//			xuyuContentCardInfoImportDao.insertNotExistsMobilInfo(batchNo);
//		}
//		// 更新主表内容
//		xuyuContentCardInfoImportDao.updateBasic(batchNo);
//		xuyuContentCardInfoImportDao.updateSum(batchNo);
//		xuyuContentCardInfoImportDao.updateActivateNoTest(batchNo);
//		xuyuContentCardInfoImportDao.updateActivate(batchNo);
//		xuyuContentCardInfoImportDao.updateDeadline(batchNo);
	}
	
	/**
	 * 联通数据更新
	 * @param batchNo
	 */
	private void updateLt(String batchNo){
		// 第一步删除无效数据
		importTempDao.delLt();
		// 值类型转换
		xuyuContentCardInfoImportDao.updateLt();
		// 第二步校验数据是否已经更新过
		int j = xuyuContentCardInfoImportDao.getCountLt();
		if (j == 0) {
			// 还没操作的直接插入
			xuyuContentCardInfoImportDao.insertUnicomInfo(batchNo);
		} else {
			// 数据已经插入的，针对已经存在的做更新操作，
			// 不存在的做插入操作
			xuyuContentCardInfoImportDao.updateExistsUnicomInfo(batchNo);
			xuyuContentCardInfoImportDao.insertNotExistsUnicomInfo(batchNo);
		}
		// 更新主表内容
		xuyuContentCardInfoImportDao.updateBasic(batchNo);
		xuyuContentCardInfoImportDao.updateSum(batchNo);
		xuyuContentCardInfoImportDao.updateActivateNoTest(batchNo);
		xuyuContentCardInfoImportDao.updateActivate(batchNo);
		xuyuContentCardInfoImportDao.updateDeadline(batchNo);
	}
	/**
	 * 电信更新
	 * @param batchNo
	 */
	private void updateDx(String batchNo){
		// 第一步删除无效数据
		importTempDao.delDx();
		// 值类型转换
		xuyuContentCardInfoImportDao.updateDx();
		// 第二步校验数据是否已经更新过
		int j = xuyuContentCardInfoImportDao.getCountDx();
		if (j == 0) {
			// 还没操作的直接插入
			xuyuContentCardInfoImportDao.insertTelecomInfo(batchNo);
		} else {
			// 数据已经插入的，针对已经存在的做更新操作，
			// 不存在的做插入操作
			xuyuContentCardInfoImportDao.updateExistsTelecomInfo(batchNo);
			xuyuContentCardInfoImportDao.insertNotExistsTelecomInfo(batchNo);
		}
		// 更新主表内容
		xuyuContentCardInfoImportDao.updateBasic(batchNo);
		xuyuContentCardInfoImportDao.updateSum(batchNo);
		xuyuContentCardInfoImportDao.updateActivateNoTest(batchNo);
		xuyuContentCardInfoImportDao.updateActivate(batchNo);
		xuyuContentCardInfoImportDao.updateDeadline(batchNo);
	}

}
