package com.xuyurepos.service.intergration.cmp.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.xuyurepos.service.intergration.cmp.common.CMPKey;




public class CMPCore {
	

    /**
     * 生成签名结果
     * @param sArray 要签名的数组
     * @return 签名结果字符串
     */
    public static String buildMysign(Map<String, String> sArray,String encode) {
        String prestr = createLinkString(sArray); //把数组所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串
        
        //解码异步回调uri
        String realUri = decodeUri(prestr,encode);
        
        String mysign = CMPMd5Encrypt.sign( realUri,CMPKey.MD5_key,encode);
        return mysign;
    }
    
    /**
     * 解码
     * @param uri
     * @param encode
     * @return
     */
    public static String decodeUri(String uri,String encode){
        
        String decodedUri = uri;
        try{
            decodedUri = URLDecoder.decode(uri,encode);
        }catch(UnsupportedEncodingException ex){
            decodedUri = uri;
        }
        return decodedUri;
    }
    
   

    /**
     * 除去数组中的空值和签名参数
     * @param sArray 签名参数组
     * @return 去掉空值与签名参数后的新签名参数组
     */
    public static Map<String, String> paraFilter(Map<String, String> sArray) {

        Map<String, String> result = new HashMap<String, String>();

        if (sArray == null || sArray.size() <= 0) {
            return result;
        }

        for (String key : sArray.keySet()) {
            String value = sArray.get(key);
            if (value == null || value.equals("") || key.equalsIgnoreCase("sign")
                || key.equalsIgnoreCase("sign_type")) {
                continue;
            }
            result.put(key, value);
        }

        return result;
    }

    /**
     * 把数组所有元素排序，并按照“参数=参数值”的模式用“&”字符拼接成字符串
     * @param params 需要排序并参与字符拼接的参数组
     * @return 拼接后字符串
     */
    public static String createLinkString(Map<String, String> params) {

        List<String> keys = new ArrayList<String>(params.keySet());
        Collections.sort(keys);

        String prestr = "";

        for (int i = 0; i < keys.size(); i++) {
            String key = keys.get(i);
            String value = params.get(key);

            if (i == keys.size() - 1) {//拼接时，不包括最后一个&字符
                prestr = prestr + key + "=" + value;
            } else {
                prestr = prestr + key + "=" + value + "&";
            }
        }

        return prestr;
    }
    
    
   /**
       * 将请求信息转换为JSON格式
    * @param params 
    * @author lvyiguang
    * @return
    */
    public  String parseMap2Json(Map<String, String> params) {
	   
	return JSONObject.toJSONString(params,SerializerFeature.WriteMapNullValue);
   }
    /**
     * 将返回信息JSON转换为Map格式
  * @param params
  * @author lvyiguang
  * @return
  */
    public Map parseJson2Map(String str) {
    	JSONObject json=JSON.parseObject(str);
    	Map map=new HashMap();
    	for(String key:json.keySet()) {
    		map.put(key, json.get(key));
    	}
    	return map;
    }
    /**
         * 将返回信息InputStream转为String
     * @param is
     * @author lvyiguang
     * @return
     */
    public  String convertStreanToString(InputStream is) {
	   BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	   StringBuilder sb = new StringBuilder();
	   String line = null;
	   try {
		while((line=reader.readLine())!=null) {
			   sb.append(line+"\n");
		   }
	} catch (IOException e) {
		e.printStackTrace();
	} finally {
		try {
			is.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	return sb.toString();	   
   }
}
